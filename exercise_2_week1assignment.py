# -*- coding: utf-8 -*-
"""exercise_2_Week1Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EZJ3Xm5cmXPAXUHDI7xausnh63uy5NPJ

Exercise 2
"""

def is_prime(n: int) -> bool:
    """Check if a number is prime."""
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    # Check divisors up to sqrt(n)
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True


def prime_number_generator():
    try:
        # Take two positive integers as input
        start_str = input("Enter the start of range: ").strip()
        end_str = input("Enter the end of range: ").strip()

        # Validate input
        if not (start_str.isdigit() and end_str.isdigit()):
            print("Both inputs must be positive integers.")
            return

        start = int(start_str)
        end = int(end_str)

        if start <= 0 or end <= 0:
            print("Both numbers must be positive.")
            return
        if start > end:
            print("Start of range cannot be greater than end.")
            return

        # Find all primes in range
        primes = [num for num in range(start, end + 1) if is_prime(num)]

        # Display primes (10 numbers per line)
        if not primes:
            print("No prime numbers found in the given range.")
            return

        print("\n Prime numbers in the range:")
        for i, prime in enumerate(primes, start=1):
            print(f"{prime:5}", end=" ")  # formatted with spacing
            if i % 10 == 0:
                print()  # new line after 10 numbers
        print()  # final new line

    except Exception as e:
        # Handle unexpected errors gracefully
        print("An unexpected error occurred:", str(e))


# Run the program
if __name__ == "__main__":
    prime_number_generator()