# -*- coding: utf-8 -*-
"""exercise_3_Week1_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E_WGtYu111xrK2r65BxXhvfZlsbt3-K6
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

import csv
import os
import numpy as np

# Set file paths
input_file = "/content/drive/My Drive/student_marks.csv"  # root of Google Drive
output_file = "/content/output_results.csv"

# Weighting
EXAM_WEIGHT = 0.6
COURSEWORK_WEIGHT = 0.4

def compute_grade(overall):
    if overall >= 70:
        return 'A'
    elif overall >= 60:
        return 'B'
    elif overall >= 50:
        return 'C'
    elif overall >= 40:
        return 'D'
    else:
        return 'F'

def process_student_marks(input_file, output_file):
    try:
        if not os.path.exists(input_file):
            print(f"Input file '{input_file}' not found.")
            return

        data_rows = []
        with open(input_file, 'r') as f:
            reader = csv.reader(f)
            for line_no, row in enumerate(reader, start=1):
                try:
                    if len(row) != 3:
                        print(f"Skipping line {line_no}: Incorrect columns -> {row}")
                        continue
                    reg_no = row[0].strip()
                    exam_mark = float(row[1].strip())
                    coursework_mark = float(row[2].strip())

                    # Validate mark ranges
                    if not (0 <= exam_mark <= 100 and 0 <= coursework_mark <= 100):
                        print(f"Skipping line {line_no}: Marks out of range -> {row}")
                        continue

                    overall = exam_mark * EXAM_WEIGHT + coursework_mark * COURSEWORK_WEIGHT
                    grade = compute_grade(overall)
                    data_rows.append((reg_no, exam_mark, coursework_mark, overall, grade))
                except ValueError:
                    print(f"Skipping line {line_no}: Invalid numeric values -> {row}")

        if not data_rows:
            print("No valid student data to process.")
            return

        # Create structured numpy array
        dtype = [
            ('reg_no', 'U20'),
            ('exam_mark', 'f4'),
            ('coursework_mark', 'f4'),
            ('overall', 'f4'),
            ('grade', 'U2')
        ]
        students_array = np.array(data_rows, dtype=dtype)

        # Sort by overall marks (descending)
        sorted_students = np.sort(students_array, order='overall')[::-1]

        # Write to output file
        with open(output_file, 'w', newline='') as f_out:
            writer = csv.writer(f_out)
            writer.writerow(['Registration No', 'Exam Mark', 'Coursework Mark', 'Overall', 'Grade'])
            for s in sorted_students:
                writer.writerow([s['reg_no'], s['exam_mark'], s['coursework_mark'], round(s['overall'], 2), s['grade']])

        # Display grade statistics
        unique, counts = np.unique(sorted_students['grade'], return_counts=True)
        print("\n Grade Statistics:")
        for grade, count in zip(unique, counts):
            print(f"Grade {grade}: {count}")

        print(f"\n Processing complete! Results written to '{output_file}'")

    except Exception as e:
        print(" An unexpected error occurred:", str(e))

# Run the processor
process_student_marks(input_file, output_file)